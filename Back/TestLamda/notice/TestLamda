@Documented //적용위치
 @Rentention(value=RUNTIME) // 실행시점
 @Target(value=TYPE) // 대상
public @interface FunctionaInterface

1) Lamda는 SE 8애 도입된 표기법이다.

2) 익명함수 사용하는 방식

ex) 익명클래스 1.8이전  
        Button bt = new Button();
        bt.addActionListener(new ActionListener() {
           @Override 
             public void actionPerformed(ActionEvent E){
               ....
             }        
         } );


3) 클로저 (Closure)라고 한다.	=	Lamda

4) @FunctionalInterface를 사용한 함수형 인터페이스, 람다식 표현식, 메소드 참조, 생성자 참조,
	클래스 멤버와 로컬변수 사용, 표준 API 함수 인터페이스이다.
	
5)람다식 함수형 인터페이스 
    
    @FunctionalInterface  ---------  어노테이션 선언 
	private interface  인터페이스명 {
		public  void[자료형]   함수명 (매개인수,,,);
	}
	
   람다 식 함수 형 인터페이스는 lambda 표현식을  사용한다.
 ( 구현하는 메서드의 인수 ) -> { 처리 } 형식을 취하며 기본 문법에 따라 처리 구현을 
   간결하게 기술 할 수 있으며 복수라도 인수 없이 처리 가능하다.
   
lambda 표현식은 Method와 유사하나 다음의 4가지가 다르다.  

5-1.lambda 표현식은 익명으로 처리되어 이름이 없다.
5-2.lambda 표현식은 compiler가 context에 맞는 타입을 유추하기 때문에 return type이 없다. 
5-3.lambda 표현식은 compiler가 context에서 유추되어   throws clause가 없다. )
5-4.lambda 표현식은 람다 표현식은 Generic이 될 수 없어  type 파라미터를 선언할 수 없다.
	