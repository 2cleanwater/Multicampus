1. context_root 이름을 바꾸어 보기
	(프로젝트 이름과 url에 있는 context이름을 다르게 주는 것)
	확인 : project_name / .settings/ 
											org.eclipse.wst.common.component (에서 수정 및 확인 할 수 있다)
											
	http://localhost:8080/myweb/MyTest (수정 후)
	http://localhost:8080/Web03/MyTest (수정 전)
	
	
	2. Web03을 http://localhost:8080/myweb/로 요청해서 url 맵핑의 GET 방식(default)을 확인

		http://localhost:8080/myweb/ -> web.xml -> index.jsp -> /MyTest로 이동(하이퍼링크)
																					(index_jsp.java) -> (MyTest.java)
		-com.test.MyTest
		-myweb/index.jsp
		
		
	3. jsp -> servlet 으로 url 매핑작업
	

	4. servlet객체를 확인하자
	
		Servlet : 서블릿 프로그램이 반드시 구현해야 하는 메소드를 선언하고 있는 인터페이스 
					  서블릿의 생명 주기를 가진다.
					  init() -> service() -> distory()
					  서블릿 초기화 -> 클라이언트 요청처리 -> 서블릿 종료
					  init()는 맨 처음 메모리에 할당 될 때 수행되고 웹페이지를 새로고침 하면서 요청처리를 하게 되면 service()가 계속 실행 된다.
					  
					  
	  [ Object - GenericServlet - HttpServlet ] : 부모 - 자식 상속 순서
	   
	  GenericServlet : Servlet 인터페이스를 상속을 받아 client/servlet 환경에서 필요한 기능을 구현하는 추상 클래스  
	  
	  HttpServlet : GenericServlet를 상속 받아서 Http 프로토콜에 맞는 동작을 수행하도록 구현된 클래스
	  
	  HttpServletRequest : 클라이언트가 서버에 요청할 때 생성되는 객체로 요청  정보를 포함하는 기능의 메소드로 멤버를 구성
	  
	  HttpServletResponse : 서버에 클라이언트에게 응답할 때 생성되는 객체로 응답 정보를 포함하는 기능의 메소드로 멤버를 구성
	  
	  
	  5. com.test.MyScore.java : ㅎ사나의 서블릿에 각각의 url 매핑에 따른  기능을 분리하는 연습
	  
	  
	  6. jsp정적 페이지에서 (i nput.jsp) 파일에서 폼 데이터를 get방식, post방식으로 action을 servlet으로 맵핑해서 출력하기
		  action="/myweb/myres" 		: 		input.jsp -> com.test.MyRes.java -> doPost()
		  
	  
	  
	  7. com.test.MyServlet : 서블릿의 생명 주기를 확인
		
		init() 서블릿 초기화 -> DB연결, 파일오픈, 로그파일에 로딩된 서블릿 이름 추가, ServletConfig객체로 넘겨받은 초기값 설정, 서블릿 요청 cnt
		service() 클라이언트의 요청 처리 -> 클라이언트가 path로 요청할 때마다 호출된다. (요청할 때 마다 하나의 스레드를 생성한다)
				service()메소드가 있으면 doGet(), doPost()등의 메소드는 실행되지 않는다 => service()가 상위 클래스 객체이므로
		
		destory() 서블릿 종료 -> 서블릿의 초기화에서 할당된 객체들을 명시 소멸한다.
											 서블릿이 재 컴파일 될 때 호출된다.
		.class -> jvm(heap) -> 메모리할당 -> Garbage Collector (메모리 할당된 것들을 자동 소멸)
																GC영역: [Young-memory / Old-memory]  => Old 메모리에 있던 것들 부터 먼저 소멸
																=> 자바에서 close()메소드를 실행할 수 있는 명령어들은 반드시 close()를 해주어야 다른 언어에서의 충돌을 방지할 수 있다.
										
										
																
		서블릿 컨테이너와 서블릿 디렉토리를 알아보자.
  
  - 서블릿 컨테이너란 동적으로 로드되는 자바클래스인 서블릿을 인식할 수 있는 웹서버의 기능을 말하며,
   서블릿 엔진(Servlet Engine)이라고도 말한다. 
 
  -서블릿 컨테이너는 웹 애플리케이션 상에서 서블릿이 존재하는 디렉토리에 작성된 
   .java 파일을 .class로 컴파일 되면서 웹서버의 메모리에 로드되어 실행된다.
   
-  서버를 구축방법에 상관없이 서블릿 수행을 요청 받을 때마다 스레드를 병렬로 기동하여 수행하게 되는데
  이러 한 과정을 구현해 주는 것이 바로 웹서버 기능을 가진 톰캣이다.
   
- 톰캣은 웹서버에 서블릿 클래스를 실행시킬 수 있는 자바 가상머신(JVM)을 수행할 수 있게 해주는 
   일련의 소프트웨어이며 서블릿 컨테이너에 웹서버 기능을 내장해서 지원해주는 독립 형 서블릿 엔진이다. 
   
-톰캣은 "%CATALINA_HOME%\webapps"을 root로 인식해서 로컬로 웹 애플리케이션을 
  하나의 ServletContext로 매핑하고,
   여러 개의 서블릿은 각각 하나의 ServletConfig 객체를 생성하며 로딩 된다. 

-HTTP상에 작동되는 서블릿은 서블릿 컨테이너 의 클라이언트의 요청과 서버 응답에 대한 
  프로토콜 값을 가지고 동작되며 웹 애플리케이션 단위로 구성된다.
  
-하나의 웹 애플리케이션을 만들 때는 컨테이너가 설정된 구조와 위치대로 애플리케이션 디렉토리를 
만들어 구현시키는데, 이러한 디렉토리 구조를 ‘Servlet Directory’ 라고 부른다.
																 
		
		